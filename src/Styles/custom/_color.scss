@use "../abstracts/" as *;
@use "sass:string";

//? Prevent Hsl to transform to Hex.
@function hsl($h, $s, $l) {
	@return unquote("hsl(#{$h}, #{$s}, #{$l})");
}

$global-colors: (
	surface: (
		0: hsl(210, 11%, 2%),
		1: hsl(210, 11%, 7%),
		2: hsl(210, 11%, 15%),
		3: hsl(210, 11%, 23%),
	),
	text: (
		0: hsl(0, 0%, 95%),
		1: hsl(0, 0%, 85%),
		2: hsl(0, 0%, 70%),
	),
	gaslur: (
		0: hsl(249, 19%, 14%),
	),
);

$page-colors: (
	gaslur: (
		surface: (
			0: hsl(249, 19%, 14%),
		),
		brand: (
			0: hsl(271, 70%, 60%),
			1: hsl(214, 84%, 56%),
		),
	),
	kafer: (
		surface: (
			0: hsl(52, 94%, 94%),
			1: hsl(36, 70%, 78%),
		),
		brand: (
			0: hsl(32, 65%, 62%),
			1: hsl(28, 67%, 44%),
		),
		accent: (
			0: hsl(88, 38%, 15%),
			1: hsl(74, 32%, 32%),
		),
	),
);

@function hsl-slice($hsl) {
	$break-hsl: string.slice(
		$string: $hsl,
		$start-at: 5,
		$end-at: -2,
	);

	@return $break-hsl;
}
:root {
	@each $colors, $shades in $global-colors {
		@each $shade, $color in $shades {
			--clr-#{$colors}-#{$shade}: #{$color};
			--clra-#{$colors}-#{$shade}: #{hsl-slice($color)};
		}
	}

	@each $page, $types in $page-colors {
		@each $type, $shades in $types {
			@each $shade, $colors in $shades {
				--#{$page}-#{$type}-#{$shade}: #{$colors};
				--#{$page}-a-#{$type}-#{$shade}: #{hsl-slice($colors)};
			}
		}
	}
}
